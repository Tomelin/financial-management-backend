// Code generated by mockery v2.50.0. DO NOT EDIT.

package coremocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/Tomelin/financial-management-backend/internal/core/entity"
)

// IUser is an autogenerated mock type for the IUser type
type IUser struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *IUser) Create(ctx context.Context, user *entity.AccountUser) (*entity.AccountUser, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.AccountUser) (*entity.AccountUser, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.AccountUser) *entity.AccountUser); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.AccountUser) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *IUser) Delete(ctx context.Context, id *string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx
func (_m *IUser) Get(ctx context.Context) ([]entity.AccountUser, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []entity.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.AccountUser, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.AccountUser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *IUser) GetByEmail(ctx context.Context, email *string) (*entity.AccountUser, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *entity.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*entity.AccountUser, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *entity.AccountUser); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByFilterMany provides a mock function with given fields: ctx, filter
func (_m *IUser) GetByFilterMany(ctx context.Context, filter []entity.QueryDBClause) ([]entity.AccountUser, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilterMany")
	}

	var r0 []entity.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDBClause) ([]entity.AccountUser, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDBClause) []entity.AccountUser); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.QueryDBClause) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByFilterOne provides a mock function with given fields: ctx, filter
func (_m *IUser) GetByFilterOne(ctx context.Context, filter []entity.QueryDBClause) (*entity.AccountUser, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilterOne")
	}

	var r0 *entity.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDBClause) (*entity.AccountUser, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDBClause) *entity.AccountUser); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.QueryDBClause) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *IUser) GetById(ctx context.Context, id *string) (*entity.AccountUser, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *entity.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*entity.AccountUser, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *entity.AccountUser); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, data
func (_m *IUser) Update(ctx context.Context, data *entity.AccountUser) (*entity.AccountUser, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.AccountUser) (*entity.AccountUser, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.AccountUser) *entity.AccountUser); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.AccountUser) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUser creates a new instance of IUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUser {
	mock := &IUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
