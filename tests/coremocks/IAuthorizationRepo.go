// Code generated by mockery v2.50.0. DO NOT EDIT.

package coremocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/synera-br/financial-management/src/backend/internal/core/entity"
)

// IAuthorizationRepo is an autogenerated mock type for the IAuthorizationRepo type
type IAuthorizationRepo struct {
	mock.Mock
}

// GenerateTokenJWT provides a mock function with given fields: ctx, token, user
func (_m *IAuthorizationRepo) GenerateTokenJWT(ctx context.Context, token *entity.AuthorizationClaims, user *entity.AccountUser) (*string, error) {
	ret := _m.Called(ctx, token, user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokenJWT")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.AuthorizationClaims, *entity.AccountUser) (*string, error)); ok {
		return rf(ctx, token, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.AuthorizationClaims, *entity.AccountUser) *string); ok {
		r0 = rf(ctx, token, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.AuthorizationClaims, *entity.AccountUser) error); ok {
		r1 = rf(ctx, token, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTokenJWT provides a mock function with given fields: ctx, token
func (_m *IAuthorizationRepo) ParseTokenJWT(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ParseTokenJWT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshTokenJWT provides a mock function with given fields: ctx, token
func (_m *IAuthorizationRepo) RefreshTokenJWT(ctx context.Context, token *string) (*string, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokenJWT")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*string, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *string); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeTokenJWT provides a mock function with given fields: ctx, token
func (_m *IAuthorizationRepo) RevokeTokenJWT(ctx context.Context, token *string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for RevokeTokenJWT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreTokenJWT provides a mock function with given fields: ctx, token, userId
func (_m *IAuthorizationRepo) StoreTokenJWT(ctx context.Context, token []byte, userId *string) error {
	ret := _m.Called(ctx, token, userId)

	if len(ret) == 0 {
		panic("no return value specified for StoreTokenJWT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, *string) error); ok {
		r0 = rf(ctx, token, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateTokenJWT provides a mock function with given fields: ctx, token
func (_m *IAuthorizationRepo) ValidateTokenJWT(ctx context.Context, token string) (*entity.AccountUser, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTokenJWT")
	}

	var r0 *entity.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.AccountUser, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.AccountUser); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAuthorizationRepo creates a new instance of IAuthorizationRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthorizationRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthorizationRepo {
	mock := &IAuthorizationRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
