// Code generated by mockery v2.50.0. DO NOT EDIT.

package coremocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/Tomelin/financial-management-backend/internal/core/entity"
)

// ITransactionCategoryRepository is an autogenerated mock type for the ITransactionCategoryRepository type
type ITransactionCategoryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, category
func (_m *ITransactionCategoryRepository) Create(ctx context.Context, category *entity.TransactionCategory) (*entity.TransactionCategory, *entity.ModuleError) {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.TransactionCategory
	var r1 *entity.ModuleError
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TransactionCategory) (*entity.TransactionCategory, *entity.ModuleError)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TransactionCategory) *entity.TransactionCategory); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TransactionCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.TransactionCategory) *entity.ModuleError); ok {
		r1 = rf(ctx, category)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.ModuleError)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ITransactionCategoryRepository) Delete(ctx context.Context, id *string) *entity.ModuleError {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *entity.ModuleError
	if rf, ok := ret.Get(0).(func(context.Context, *string) *entity.ModuleError); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ModuleError)
		}
	}

	return r0
}

// Get provides a mock function with given fields: ctx, walletID
func (_m *ITransactionCategoryRepository) Get(ctx context.Context, walletID *string) ([]entity.TransactionCategory, *entity.ModuleError) {
	ret := _m.Called(ctx, walletID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []entity.TransactionCategory
	var r1 *entity.ModuleError
	if rf, ok := ret.Get(0).(func(context.Context, *string) ([]entity.TransactionCategory, *entity.ModuleError)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) []entity.TransactionCategory); ok {
		r0 = rf(ctx, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TransactionCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) *entity.ModuleError); ok {
		r1 = rf(ctx, walletID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.ModuleError)
		}
	}

	return r0, r1
}

// GetByFilterMany provides a mock function with given fields: ctx, filter
func (_m *ITransactionCategoryRepository) GetByFilterMany(ctx context.Context, filter []entity.QueryDBClause) ([]entity.TransactionCategory, *entity.ModuleError) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilterMany")
	}

	var r0 []entity.TransactionCategory
	var r1 *entity.ModuleError
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDBClause) ([]entity.TransactionCategory, *entity.ModuleError)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDBClause) []entity.TransactionCategory); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TransactionCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.QueryDBClause) *entity.ModuleError); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.ModuleError)
		}
	}

	return r0, r1
}

// GetByFilterOne provides a mock function with given fields: ctx, filter
func (_m *ITransactionCategoryRepository) GetByFilterOne(ctx context.Context, filter []entity.QueryDB) (*entity.TransactionCategory, *entity.ModuleError) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilterOne")
	}

	var r0 *entity.TransactionCategory
	var r1 *entity.ModuleError
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDB) (*entity.TransactionCategory, *entity.ModuleError)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDB) *entity.TransactionCategory); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TransactionCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.QueryDB) *entity.ModuleError); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.ModuleError)
		}
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *ITransactionCategoryRepository) GetById(ctx context.Context, id *string) (*entity.TransactionCategory, *entity.ModuleError) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *entity.TransactionCategory
	var r1 *entity.ModuleError
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*entity.TransactionCategory, *entity.ModuleError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *entity.TransactionCategory); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TransactionCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) *entity.ModuleError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.ModuleError)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, category
func (_m *ITransactionCategoryRepository) Update(ctx context.Context, category *entity.TransactionCategory) (*entity.TransactionCategory, *entity.ModuleError) {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.TransactionCategory
	var r1 *entity.ModuleError
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TransactionCategory) (*entity.TransactionCategory, *entity.ModuleError)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TransactionCategory) *entity.TransactionCategory); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TransactionCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.TransactionCategory) *entity.ModuleError); ok {
		r1 = rf(ctx, category)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.ModuleError)
		}
	}

	return r0, r1
}

// NewITransactionCategoryRepository creates a new instance of ITransactionCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITransactionCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITransactionCategoryRepository {
	mock := &ITransactionCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
