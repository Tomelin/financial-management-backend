// Code generated by mockery v2.50.0. DO NOT EDIT.

package coremocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/Tomelin/financial-management-backend/internal/core/entity"
)

// ITenant is an autogenerated mock type for the ITenant type
type ITenant struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *ITenant) Create(_a0 *entity.TenantResponse) (*entity.TenantResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.TenantResponse) (*entity.TenantResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.TenantResponse) *entity.TenantResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.TenantResponse) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ITenant) Delete(id *string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with no fields
func (_m *ITenant) Get() ([]entity.TenantResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []entity.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.TenantResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.TenantResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByFilterMany provides a mock function with given fields: ctx, filter
func (_m *ITenant) GetByFilterMany(ctx context.Context, filter []entity.QueryDB) ([]entity.TenantResponse, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilterMany")
	}

	var r0 []entity.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDB) ([]entity.TenantResponse, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDB) []entity.TenantResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.QueryDB) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByFilterOne provides a mock function with given fields: ctx, filter
func (_m *ITenant) GetByFilterOne(ctx context.Context, filter []entity.QueryDB) (*entity.TenantResponse, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilterOne")
	}

	var r0 *entity.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDB) (*entity.TenantResponse, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.QueryDB) *entity.TenantResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.QueryDB) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *ITenant) GetById(id *string) (*entity.TenantResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *entity.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*entity.TenantResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*string) *entity.TenantResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: data
func (_m *ITenant) Update(data *entity.TenantResponse) (*entity.TenantResponse, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.TenantResponse) (*entity.TenantResponse, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*entity.TenantResponse) *entity.TenantResponse); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.TenantResponse) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITenant creates a new instance of ITenant. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITenant(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITenant {
	mock := &ITenant{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
